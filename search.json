[{"path":"https://meekalpha.github.io/echartr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 echartr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"https://meekalpha.github.io/echartr/articles/Examples.html","id":"basic-line-chart","dir":"Articles","previous_headings":"Line","what":"Basic Line Chart","title":"Examples","text":"https://echarts.apache.org/examples/en/editor.html?c=line-simple","code":"data <- tibble::tibble(   x = c(\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"),   y = c(150, 230, 224, 218, 135, 147, 260) )  echartr(option = list(   xAxis = list(type = \"category\", data = data$x),   yAxis = list(type = \"value\"),   series = ec_line(data, y = y) ))"},{"path":"https://meekalpha.github.io/echartr/articles/Examples.html","id":"smoothed-line-chart","dir":"Articles","previous_headings":"Line","what":"Smoothed line chart","title":"Examples","text":"https://echarts.apache.org/examples/en/editor.html?c=line-smooth","code":"data <- tibble::tibble(   x = c(\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"),   y = c(820, 932, 901, 934, 1290, 1330, 1320) )  echartr(option = list(   xAxis = list(type = \"category\", data = data$x),   yAxis = list(type = \"value\"),   series = ec_line(data, y = y, smooth = TRUE) ))"},{"path":"https://meekalpha.github.io/echartr/articles/Examples.html","id":"basic-area-chart","dir":"Articles","previous_headings":"Line","what":"Basic area chart","title":"Examples","text":"https://echarts.apache.org/examples/en/editor.html?c=area-basic","code":"data <- tibble::tibble(   x = c(\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"),   y = c(820, 932, 901, 934, 1290, 1330, 1320) )  echartr(option = list(   xAxis = list(     type = \"category\",      boundaryGap = FALSE,      data = data$x   ),   yAxis = list(type = \"value\"),   series = ec_line(data, y = y, areaStyle = list()) ))"},{"path":"https://meekalpha.github.io/echartr/articles/Examples.html","id":"stacked-line-chart","dir":"Articles","previous_headings":"Line","what":"Stacked Line Chart","title":"Examples","text":"https://echarts.apache.org/examples/en/editor.html?c=line-stack","code":"data <- tibble::tibble(   Day = c(\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"),   Email = c(120, 132, 101, 134, 90, 230, 210),   `Union Ads` = c(220, 182, 191, 234, 290, 330, 310),   `Video Ads` = c(150, 232, 201, 154, 190, 330, 410),   `Direct` = c(320, 332, 301, 334, 390, 330, 320),   `Search Engine` = c(820, 932, 901, 934, 1290, 1330, 1320), )   # Convert wide data to tidy data (https://r4ds.had.co.nz/tidy-data.html) data <- data |>   tidyr::pivot_longer(Email:`Search Engine`)  echartr(option = list(   title = list(text = \"Stacked Line\"),   tooltip = list(trigger = \"axis\"),   legend = list(data = unique(data$name)),   grid = list(left = \"3%\", right = \"4%\", bottom = \"3%\", containLabel = TRUE),   toolbox = list(     feature = list(saveAsImage = list())   ),   xAxis = list(     type = \"category\",      boundaryGap = FALSE,     data = unique(data$Day)   ),   yAxis = list(type = \"value\"),   series = ec_line(     data,      y = value,      name = name,     stack = \"Total\"   ) ))"},{"path":"https://meekalpha.github.io/echartr/articles/Examples.html","id":"stacked-area-chart","dir":"Articles","previous_headings":"Line","what":"Stacked Area Chart","title":"Examples","text":"https://echarts.apache.org/examples/en/editor.html?c=area-stack","code":"data <- tibble::tibble(   Day = c(\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"),   Email = c(120, 132, 101, 134, 90, 230, 210),   `Union Ads` = c(220, 182, 191, 234, 290, 330, 310),   `Video Ads` = c(150, 232, 201, 154, 190, 330, 410),   `Direct` = c(320, 332, 301, 334, 390, 330, 320),   `Search Engine` = c(820, 932, 901, 934, 1290, 1330, 1320), )   # Convert wide data to tidy data (https://r4ds.had.co.nz/tidy-data.html) data <- data |>   tidyr::pivot_longer(Email:`Search Engine`)  echartr(option = list(   title = list(text = \"Stacked Area Chart\"),   tooltip = list(     trigger = \"axis\",     axisPointer = list(       type = \"cross\",       label = list(         backgroundColor = \"#6a7985\"       )     )   ),   legend = list(data = unique(data$name)),   toolbox = list(     feature = list(saveAsImage = list())   ),   grid = list(left = \"3%\", right = \"4%\", bottom = \"3%\", containLabel = TRUE),   xAxis = list(     type = \"category\",      boundaryGap = FALSE,     data = unique(data$Day)   ),   yAxis = list(type = \"value\"),   series = ec_line(     data,      y = value,      name = name,     areaStyle = list(),     emphasis = list(focus = \"series\"),     stack = \"Total\",     label = if (name == \"Search Engine\") list(show = TRUE, position = \"top\") else list()   ) ))"},{"path":[]},{"path":"https://meekalpha.github.io/echartr/articles/Examples.html","id":"basic-bar","dir":"Articles","previous_headings":"Bar","what":"Basic Bar","title":"Examples","text":"https://echarts.apache.org/examples/en/editor.html?c=bar-simple","code":"data <- tibble::tibble(   x = c(\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"),   y = c(120, 200, 150, 80, 70, 110, 130) ) echartr(option = list(   xAxis = list(type = \"category\", data = data$x),   yAxis = list(type = \"value\"),   series = ec_bar(data, y = y) ))"},{"path":"https://meekalpha.github.io/echartr/articles/Examples.html","id":"axis-align-with-tick","dir":"Articles","previous_headings":"Bar","what":"Axis Align with Tick","title":"Examples","text":"https://echarts.apache.org/examples/en/editor.html?c=bar-tick-align","code":"data <- tibble::tibble(   x = c(\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"),   y = c(10, 52, 200, 334, 390, 330, 220) )  echartr(option = list(   tooltip = list(     trigger = \"axis\",     axisPointer = list(       type = \"shadow\"     )   ),   grid = list(     left = \"3%\",     right = \"4%\",     bottom = \"3%\",     containLabel = TRUE   ),   xAxis = list(     type = \"category\",      data = data$x,      axisTick = list(       alignWithLabel = TRUE     )   ),   yAxis = list(type = \"value\"),   series = ec_bar(data, y = y, name = \"Direct\", barWidth = \"60%\"),   axisPointer = list(     type = \"shadow\"   ) ))"},{"path":"https://meekalpha.github.io/echartr/articles/Examples.html","id":"bar-with-background","dir":"Articles","previous_headings":"Bar","what":"Bar with Background","title":"Examples","text":"https://echarts.apache.org/examples/en/editor.html?c=bar-background","code":"data <- tibble::tibble(   x = c(\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"),   y = c(120, 200, 150, 80, 70, 110, 130) )  echartr(option = list(   xAxis = list(     type = \"category\", data = data$x   ),   yAxis = list(type = \"value\"),   series = ec_bar(data, y = y, showBackground = TRUE, backgroundStyle = list(     color = \"rgba(220, 220, 220, 0.8)\" # TODO: Handle grDevices::rgb   )) ))"},{"path":"https://meekalpha.github.io/echartr/articles/Examples.html","id":"bar-label-rotation","dir":"Articles","previous_headings":"Bar","what":"Bar Label Rotation","title":"Examples","text":"https://echarts.apache.org/examples/en/editor.html?c=bar-label-rotation","code":"label_option <- list(   show = TRUE,   formatter = \"{c}  {name|{a}}\",   rich = \"name: {}\",   rotate = 90, # 0 - 90   align = \"left\", # \"left\", \"right\", \"center\"   verticalAlign = \"middle\", # \"top\", \"middle\", \"bottom\"   position = \"insideBottom\", # \"inside\", \"insideTop\", \"insideBottom\", \"insideLeft\",                               # \"insideRight\", \"insideTopLeft\", \"insideTopRight\",                               # \"insideBottomLeft\", \"insideBottomRight\"                              # \"outside\", \"outsideTop\", \"outsideBottom\", \"outsideLeft\",   distance = 15 )  data <- tibble::tibble(   year = c(\"2012\", \"2013\", \"2014\", \"2015\", \"2016\"),   Forest = c(320, 332, 301, 334, 390),   Steppe = c(220, 182, 191, 234, 290),   Desert = c(150, 232, 201, 154, 190),   Wetland = c(98, 77, 101, 99, 40) )  # Convert wide data to tidy data (https://r4ds.had.co.nz/tidy-data.html) data <- data |>   tidyr::pivot_longer(Forest:Wetland)  echartr(option = list(   tooltip = list(     trigger = \"axis\",     axisPointer = list(       type = \"shadow\"     )   ),   legend = list(data = unique(data$name)),   toolbox = list(     show = TRUE,     orient = \"vertical\",     left = \"right\",     top = \"center\",     feature = list(       mark = list(show = TRUE),       dataView = list(show = TRUE, readOnly = FALSE),       magicType = list(show = TRUE, type = c(\"line\", \"bar\")),       restore = list(show = TRUE),       saveAsImage = list(show = TRUE)     )   ),   xAxis = list(type = \"category\", data = unique(data$year)),   yAxis = list(type = \"value\"),   series = ec_bar(     data,      label = label_option,     y = value,      name = name,     barGap = 0L   ) ))"},{"path":[]},{"path":"https://meekalpha.github.io/echartr/articles/Examples.html","id":"doughnut-chart","dir":"Articles","previous_headings":"Pie","what":"Doughnut Chart","title":"Examples","text":"https://echarts.apache.org/examples/en/editor.html?c=pie-doughnut","code":"data <- tibble::tibble(   name = c(\"Search Engine\", \"Direct\", \"Email\", \"Union Ads\", \"Video Ads\"),   value = c(1048, 735, 580, 484, 300) )  echartr(option = list(   tooltip = list(trigger = \"item\"),   legend = list(top = \"5%\", left = \"center\"),   series = ec_pie(data,     value,      name = \"Access From\",     data = list(name = name),     radius = list(\"40%\", \"70%\"),     avoidLabelOverlap = FALSE,     label = list(show = FALSE, position = \"center\"),     emphasis = list(label = list(       show = TRUE,       fontSize = 40,       fontWeight = \"bold\"     )),     labelLine = list(show = FALSE)   ) ))"},{"path":"https://meekalpha.github.io/echartr/articles/Examples.html","id":"calendar-pie","dir":"Articles","previous_headings":"Pie","what":"Calendar pie","title":"Examples","text":"https://echarts.apache.org/examples/en/editor.html?c=pie-calendar","code":"cell_size <- c(80, 80) pie_radius <- 30  data <- tibble::tibble(   Work = floor(runif(28, 0, 25)),   Entertainment = floor(runif(28, 0, 25)),   Sleep = floor(runif(28, 0, 25)),   index = 1:28,   date = as.character(seq(as.Date(\"2017-02-01\"), as.Date(\"2017-02-28\"), by = \"day\")) )  # Convert wide data to tidy data (https://r4ds.had.co.nz/tidy-data.html) data <- data |>   tidyr::pivot_longer(Work:Sleep)  echartr(option = list(   tooltip = list(),   legend = list(     data = unique(data$name),     bottom = \"20\"   ),   calendar = list(     top = \"middle\", left = \"center\", orient = \"vertical\",     cellSize = cell_size,     yearLabel = list(       show = FALSE, fontSize = 30     ),     dayLabel = list(       margin = 20, firstDay = 1,        nameMap = c(\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\")     ),     monthLabel = list(show = FALSE),     range = c(\"2017-02\")   ),   series = c(     ec_scatter(data,        y = date,        id = \"label\",        coordinateSystem = \"calendar\",        symbolSize = 0,       label = list(         show = TRUE,          offset = c(-cell_size[[1]] / 2 + 10, -cell_size[[2]] / 2 + 10),         formatter = htmlwidgets::JS(           \"function(params) {              var date = Date.parse(params.value);             return echarts.time.format(date, '{dd}', false);           }\"         )       )     ),     ec_pie(data,        value = value,        id = paste0(\"pie-\", index),        center = date,        coordinateSystem = \"calendar\",       radius = pie_radius,       label = list(formatter = \"{c}\", position = \"inside\")     )   ) ))"},{"path":"https://meekalpha.github.io/echartr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ashleigh Williams. Author, maintainer.","code":""},{"path":"https://meekalpha.github.io/echartr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Williams (2025). echartr: Apache Echarts R. R package version 0.0.0.9000, https://github.com/meekalpha/echartr.","code":"@Manual{,   title = {echartr: Apache Echarts in R},   author = {Ashleigh Williams},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://github.com/meekalpha/echartr}, }"},{"path":"https://meekalpha.github.io/echartr/index.html","id":"echartr","dir":"","previous_headings":"","what":"Apache Echarts in R","title":"Apache Echarts in R","text":"echartr provides R interface Apache Echarts, matching Echarts Javascript API closely possible can refer directly https://echarts.apache.org/en/index.html.","code":""},{"path":"https://meekalpha.github.io/echartr/index.html","id":"working-with-dataframes","dir":"","previous_headings":"","what":"Working with data.frames","title":"Apache Echarts in R","text":"echartr provides helper functions building echart options data.frames ```{r} library(echartr) echartr(option = list( xAxis = list(type = “value”), yAxis = list(type = “value”), series = ec_scatter( iris, x = Sepal.Length, y = Sepal.Width, name = .character(Species), symbol = dplyr::case_when( Species == “setosa” ~ “circle”, Species == “versicolor” ~ “diamond”, Species == “virginica” ~ “triangle” ) ) ))","code":"## Installation  You can install the development version of echartr like so:  ``` r # install.packages(\"remotes\") remotes::install_github(\"meekalpha/echartr\")"},{"path":"https://meekalpha.github.io/echartr/reference/build_spec.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert function args to a dataframe — build_spec","title":"Convert function args to a dataframe — build_spec","text":"Convert function args dataframe","code":""},{"path":"https://meekalpha.github.io/echartr/reference/build_spec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert function args to a dataframe — build_spec","text":"","code":"build_spec(...)"},{"path":"https://meekalpha.github.io/echartr/reference/build_spec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert function args to a dataframe — build_spec","text":"... combination named arguments, become column, unnamed arguments, combined column called datapoint","code":""},{"path":"https://meekalpha.github.io/echartr/reference/ec_as_js.ec_object.html","id":null,"dir":"Reference","previous_headings":"","what":"TODO: Handle Javascript better than this — ec_as_js.ec_object","title":"TODO: Handle Javascript better than this — ec_as_js.ec_object","text":"TODO: Handle Javascript better ","code":""},{"path":"https://meekalpha.github.io/echartr/reference/ec_as_js.ec_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TODO: Handle Javascript better than this — ec_as_js.ec_object","text":"","code":"# S3 method for class 'ec_object' ec_as_js(x)"},{"path":"https://meekalpha.github.io/echartr/reference/ec_as_js.ec_object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TODO: Handle Javascript better than this — ec_as_js.ec_object","text":"x echartr list-tree","code":""},{"path":"https://meekalpha.github.io/echartr/reference/ec_as_js.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an echartr list-tree object into javascript — ec_as_js","title":"Convert an echartr list-tree object into javascript — ec_as_js","text":"Convert echartr list-tree object javascript","code":""},{"path":"https://meekalpha.github.io/echartr/reference/ec_as_js.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an echartr list-tree object into javascript — ec_as_js","text":"","code":"ec_as_js(x)"},{"path":"https://meekalpha.github.io/echartr/reference/ec_as_js.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an echartr list-tree object into javascript — ec_as_js","text":"x echartr list-tree","code":""},{"path":"https://meekalpha.github.io/echartr/reference/ec_bar.html","id":null,"dir":"Reference","previous_headings":"","what":"Bar series — ec_bar","title":"Bar series — ec_bar","text":"https://echarts.apache.org/en/option.html#series-bar","code":""},{"path":"https://meekalpha.github.io/echartr/reference/ec_bar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bar series — ec_bar","text":"","code":"ec_bar(df, x, y, ...)"},{"path":"https://meekalpha.github.io/echartr/reference/ec_bar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bar series — ec_bar","text":"","code":"# Including x-value in series data data <- tibble::tibble(x = 1:5, y = rnorm(5)) series <- ec_bar(data, x, y)  echartr(option = list(   xAxis = list(type = \"value\"),   yAxis = list(type = \"value\"),   legend = list(show = TRUE),   series = series ))  {\"x\":{\"option\":{\"xAxis\":{\"type\":\"value\"},\"yAxis\":{\"type\":\"value\"},\"legend\":{\"show\":true},\"series\":[{\"type\":\"bar\",\"data\":[[1,-1.400043516721755],[2,0.2553170548452597],[3,-2.437263611219531],[4,-0.005571286746160735],[5,0.6215527214152141]]}]}},\"evals\":[],\"jsHooks\":[]} # Including x-value in axis data - requires category type axis data <- tibble::tibble(x = 1:5, y = rnorm(5)) series <- ec_bar(data, y = y)  echartr(option = list(   xAxis = list(type = \"category\", data = data$x),   yAxis = list(type = \"value\"),   legend = list(show = TRUE),   series = series ))  {\"x\":{\"option\":{\"xAxis\":{\"type\":\"category\",\"data\":[1,2,3,4,5]},\"yAxis\":{\"type\":\"value\"},\"legend\":{\"show\":true},\"series\":[{\"type\":\"bar\",\"data\":[1.148411606026061,-1.821817660976626,-0.2473253020735244,-0.2441996067783833,-0.2827054488144648]}]}},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://meekalpha.github.io/echartr/reference/ec_clip.ec_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy the javascript representation of chart options — ec_clip.ec_object","title":"Copy the javascript representation of chart options — ec_clip.ec_object","text":"Copy javascript representation chart options","code":""},{"path":"https://meekalpha.github.io/echartr/reference/ec_clip.ec_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy the javascript representation of chart options — ec_clip.ec_object","text":"","code":"# S3 method for class 'ec_object' ec_clip(x)"},{"path":"https://meekalpha.github.io/echartr/reference/ec_clip.ec_object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy the javascript representation of chart options — ec_clip.ec_object","text":"x echartr list-tree","code":""},{"path":"https://meekalpha.github.io/echartr/reference/ec_clip.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy the javascript equivalent of an echartr list-tree object to the clipboard — ec_clip","title":"Copy the javascript equivalent of an echartr list-tree object to the clipboard — ec_clip","text":"Copy javascript equivalent echartr list-tree object clipboard","code":""},{"path":"https://meekalpha.github.io/echartr/reference/ec_clip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy the javascript equivalent of an echartr list-tree object to the clipboard — ec_clip","text":"","code":"ec_clip(x)"},{"path":"https://meekalpha.github.io/echartr/reference/ec_clip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy the javascript equivalent of an echartr list-tree object to the clipboard — ec_clip","text":"x echartr list-tree","code":""},{"path":"https://meekalpha.github.io/echartr/reference/ec_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate echarts data list-tree object from a dataframe — ec_data","title":"Generate echarts data list-tree object from a dataframe — ec_data","text":"Generate echarts data list-tree object dataframe","code":""},{"path":"https://meekalpha.github.io/echartr/reference/ec_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate echarts data list-tree object from a dataframe — ec_data","text":"","code":"ec_data(df, ...)"},{"path":"https://meekalpha.github.io/echartr/reference/ec_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate echarts data list-tree object from a dataframe — ec_data","text":"... Expressions can evaluated generate list-tree","code":""},{"path":"https://meekalpha.github.io/echartr/reference/ec_line.html","id":null,"dir":"Reference","previous_headings":"","what":"Line series — ec_line","title":"Line series — ec_line","text":"Line series","code":""},{"path":"https://meekalpha.github.io/echartr/reference/ec_line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Line series — ec_line","text":"","code":"ec_line(df, x, y, ...)"},{"path":"https://meekalpha.github.io/echartr/reference/ec_line.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Line series — ec_line","text":"","code":"# Including x-value in series data data <- tibble::tibble(x = 1:5, y = rnorm(5)) series <- ec_line(data, x, y)  echartr(option = list(   xAxis = list(type = \"value\"),   yAxis = list(type = \"value\"),   legend = list(show = TRUE),   series = series ))  {\"x\":{\"option\":{\"xAxis\":{\"type\":\"value\"},\"yAxis\":{\"type\":\"value\"},\"legend\":{\"show\":true},\"series\":[{\"type\":\"line\",\"data\":[[1,-0.5536993836887205],[2,0.628982042036008],[3,2.065024895359223],[4,-1.630989402082232],[5,0.5124269498518048]]}]}},\"evals\":[],\"jsHooks\":[]} # Including x-value in axis data - requires category type axis data <- tibble::tibble(x = 1:5, y = rnorm(5)) series <- ec_line(data, y = y)  echartr(option = list(   xAxis = list(type = \"category\", data = data$x),   yAxis = list(type = \"value\"),   legend = list(show = TRUE),   series = series ))  {\"x\":{\"option\":{\"xAxis\":{\"type\":\"category\",\"data\":[1,2,3,4,5]},\"yAxis\":{\"type\":\"value\"},\"legend\":{\"show\":true},\"series\":[{\"type\":\"line\",\"data\":[-1.863011492068328,-0.5220125147454544,-0.05260190995387954,0.5429963426611403,-0.9140748272599284]}]}},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://meekalpha.github.io/echartr/reference/ec_pie.html","id":null,"dir":"Reference","previous_headings":"","what":"Pie series — ec_pie","title":"Pie series — ec_pie","text":"https://echarts.apache.org/en/option.html#series-pie","code":""},{"path":"https://meekalpha.github.io/echartr/reference/ec_pie.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pie series — ec_pie","text":"","code":"ec_pie(df, value, ...)"},{"path":"https://meekalpha.github.io/echartr/reference/ec_pie.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pie series — ec_pie","text":"","code":"data <- tibble::tibble(name = LETTERS[1:5], value = rnorm(5)) series <- ec_pie(data, value, data = list(name = name))  echartr(option = list(   series = series ))  {\"x\":{\"option\":{\"series\":[{\"type\":\"pie\",\"data\":[{\"name\":\"A\",\"value\":0.4681544204505332},{\"name\":\"B\",\"value\":0.3629512558649863},{\"name\":\"C\",\"value\":-1.304543545034777},{\"name\":\"D\",\"value\":0.7377763212550469},{\"name\":\"E\",\"value\":1.888504929234545}]}]}},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://meekalpha.github.io/echartr/reference/ec_scatter.html","id":null,"dir":"Reference","previous_headings":"","what":"Scatter series — ec_scatter","title":"Scatter series — ec_scatter","text":"Generates single scatter series list series dataframe.","code":""},{"path":"https://meekalpha.github.io/echartr/reference/ec_scatter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scatter series — ec_scatter","text":"","code":"ec_scatter(df, x, y, ...)"},{"path":"https://meekalpha.github.io/echartr/reference/ec_scatter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Scatter series — ec_scatter","text":"https://echarts.apache.org/en/option.html#series-scatter","code":""},{"path":"https://meekalpha.github.io/echartr/reference/ec_series.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a list of series from a dataframe — ec_series","title":"Generate a list of series from a dataframe — ec_series","text":"Generate list series dataframe","code":""},{"path":"https://meekalpha.github.io/echartr/reference/ec_series.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a list of series from a dataframe — ec_series","text":"","code":"ec_series(df, ..., type)"},{"path":[]},{"path":"https://meekalpha.github.io/echartr/reference/ec_series_.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a list of series based on specification data frame — ec_series_","title":"Create a list of series based on specification data frame — ec_series_","text":"Create list series based specification data frame","code":""},{"path":"https://meekalpha.github.io/echartr/reference/ec_series_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a list of series based on specification data frame — ec_series_","text":"","code":"ec_series_(spec)"},{"path":"https://meekalpha.github.io/echartr/reference/echartr-shiny.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny bindings for echartr — echartr-shiny","title":"Shiny bindings for echartr — echartr-shiny","text":"Output render functions using echartr within Shiny applications interactive Rmd documents.","code":""},{"path":"https://meekalpha.github.io/echartr/reference/echartr-shiny.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny bindings for echartr — echartr-shiny","text":"","code":"echartrOutput(outputId, width = \"100%\", height = \"400px\")  renderEchartr(expr, env = parent.frame(), quoted = FALSE)"},{"path":"https://meekalpha.github.io/echartr/reference/echartr-shiny.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny bindings for echartr — echartr-shiny","text":"outputId output variable read width, height Must valid CSS unit (like '100%', '400px', 'auto') number, coerced string 'px' appended. expr expression generates echartr env environment evaluate expr. quoted expr quoted expression (quote())? useful want save expression variable.","code":""},{"path":"https://meekalpha.github.io/echartr/reference/echartr.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an Echart — echartr","title":"Create an Echart — echartr","text":"Create Echart","code":""},{"path":"https://meekalpha.github.io/echartr/reference/echartr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Echart — echartr","text":"","code":"echartr(option = list(), elementId = NULL)"},{"path":"https://meekalpha.github.io/echartr/reference/new_option.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new echartr 'option' object — new_option","title":"Create a new echartr 'option' object — new_option","text":"Create new echartr 'option' object","code":""},{"path":"https://meekalpha.github.io/echartr/reference/new_option.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new echartr 'option' object — new_option","text":"","code":"new_option(...)"},{"path":"https://meekalpha.github.io/echartr/reference/print.ec_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the javascript representation of an echartr list-tree object — print.ec_object","title":"Print the javascript representation of an echartr list-tree object — print.ec_object","text":"Print javascript representation echartr list-tree object","code":""},{"path":"https://meekalpha.github.io/echartr/reference/print.ec_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the javascript representation of an echartr list-tree object — print.ec_object","text":"","code":"# S3 method for class 'ec_object' print(x)"},{"path":"https://meekalpha.github.io/echartr/reference/row_eval.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate quosures provided to ... for each for in df — row_eval","title":"Evaluate quosures provided to ... for each for in df — row_eval","text":"Evaluate quosures provided ... df","code":""},{"path":"https://meekalpha.github.io/echartr/reference/row_eval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate quosures provided to ... for each for in df — row_eval","text":"","code":"row_eval(df, ...)"},{"path":"https://meekalpha.github.io/echartr/reference/spec_zoom.html","id":null,"dir":"Reference","previous_headings":"","what":"Move one level 'deeper' into the specification TODO: support unnamed stuff inside row (maybe) — spec_zoom","title":"Move one level 'deeper' into the specification TODO: support unnamed stuff inside row (maybe) — spec_zoom","text":"Move one level 'deeper' specification TODO: support unnamed stuff inside row (maybe)","code":""},{"path":"https://meekalpha.github.io/echartr/reference/spec_zoom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Move one level 'deeper' into the specification TODO: support unnamed stuff inside row (maybe) — spec_zoom","text":"","code":"spec_zoom(spec, col)"},{"path":"https://meekalpha.github.io/echartr/reference/updateEchartr.html","id":null,"dir":"Reference","previous_headings":"","what":"Update an echartr instance — updateEchartr","title":"Update an echartr instance — updateEchartr","text":"updateEchartr() updates echartr instance within Shiny application.","code":""},{"path":"https://meekalpha.github.io/echartr/reference/updateEchartr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update an echartr instance — updateEchartr","text":"","code":"updateEchartr(   session = shiny::getDefaultReactiveDomain(),   outputId,   option = NULL,   on = NULL,   off = NULL )"},{"path":"https://meekalpha.github.io/echartr/reference/updateEchartr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update an echartr instance — updateEchartr","text":"session Shiny session object. Defaults current Shiny session. outputId Shiny output ID echartr instance. option list-tree representation echart option argument, see https://echarts.apache.org/en/option.html list event listeners register, see https://echarts.apache.org/en/api.html#echartsInstance.list event listeners de-register, see https://echarts.apache.org/en/api.html#echartsInstance.Intention support functions https://echarts.apache.org/en/api.html#echartsInstance","code":""}]
